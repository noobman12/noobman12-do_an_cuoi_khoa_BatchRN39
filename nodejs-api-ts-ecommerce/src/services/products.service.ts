import createError from "http-errors";
// K·∫øt n·ªëi tr·ª±c ti·∫øp v·ªõi Database
import Product from "../models/product.model";
import { ObjectId } from "mongoose";

type TProduct = {
  _id: ObjectId;
  product_name: String;
  price: Number;
  discount: Number;
  isBest: Boolean;
  isHome: Boolean;
  gifts: [String]; // M·∫£ng qu√† t·∫∑ng
  slug: String;
  description: String;
  category: ObjectId; // Li√™n k·∫øt ƒë·∫øn danh m·ª•c
  supplier: ObjectId; // Li√™n k·∫øt ƒë·∫øn nh√† cung c·∫•p
  author: ObjectId; // Li√™n k·∫øt ƒë·∫øn t√°c gi·∫£
  model_year: String;
  isDelete: Boolean;

  params: [
    {
      name: String;
      value: String;
    }
  ];

  photos: [
    {
      link: String;
      sort: Number;
    }
  ];
};

// L·∫•y t·∫•t c·∫£ record
const findAll = async () => {
  /**
   * SELECT * FROM brands
   */
  // const products = await product.find();
  //console.log('<<=== üöÄ brands ===>>',brands);
  return "products";
};

// T√¨m 1 record theo ID
const findById = async (id: string) => {
  //ƒêi t√¨m 1 c√°i kh·ªõp id
  /**
   * SELECT * FROM brands WHERE id = ''
   */
  const product = await Product.findById(id);

  /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
  if (!product) {
    throw createError(400, "product Not Found");
  }

  return product;
};

const createRecord = async (payload: TProduct) => {
  console.log("<<=== üöÄ payload ===>>", payload);

  const product = await Product.create(payload);

  console.log("<<=== üöÄ create product ===>>", product);

  //Tr·∫£ l·∫°i record v·ª´a th√™m m·ªõi
  return product;
};

const updateById = async (id: string, payload: TProduct) => {
  //b1.Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa danh m·ª•c c√≥ id n√†y
  const product = await Product.findByIdAndUpdate(id, payload, {
    new: true, // n√≥ tr·∫£ v·ªÅ record sau khi update
  });
  console.log("<<=== üöÄ product ===>>", product);

  /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
  if (!product) {
    throw createError(400, "product Not Found");
  }

  //Return v·ªÅ record v·ª´a ƒëc update
  return product;
};

const deleteById = async (id: string) => {
  //b1 Ki·ªÉm tra xem t·ªìn t·∫°i product c√≥ id
  const product = await Product.findByIdAndDelete(id);

  if (!product) {
    throw createError(400, "product Not Found");
  }

  //Return v·ªÅ record v·ª´a x√≥a
  return product;
};

export default {
  findAll,
  findById,
  createRecord,
  updateById,
  deleteById,
};
