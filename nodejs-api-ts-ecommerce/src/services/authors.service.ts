import createError from "http-errors";
// K·∫øt n·ªëi tr·ª±c ti·∫øp v·ªõi Database
import Author from "../models/author.model";
import { ObjectId } from "mongoose";

type TAuthor = {
  _id: ObjectId;
  image: String;
  first_name: String;
  last_name: String;
  birthDate: Date;
  nationality: String;
  bio: String;
};

// L·∫•y t·∫•t c·∫£ record
const findAll = async () => {
  /**
   * SELECT * FROM brands
   */
  const authors = await Author.find();
  //console.log('<<=== üöÄ brands ===>>',brands);
  return authors;
};

// T√¨m 1 record theo ID
const findById = async (id: string) => {
  //ƒêi t√¨m 1 c√°i kh·ªõp id
  /**
   * SELECT * FROM brands WHERE id = ''
   */
  const author = await Author.findById(id);

  /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
  if (!author) {
    throw createError(400, "Author Not Found");
  }

  return author;
};

const createRecord = async (payload: TAuthor) => {
  console.log("<<=== üöÄ payload ===>>", payload);

  const author = await Author.create(payload);

  console.log("<<=== üöÄ create author ===>>", author);

  //Tr·∫£ l·∫°i record v·ª´a th√™m m·ªõi
  return author;
};

const updateById = async (id: string, payload: TAuthor) => {
  //b1.Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa danh m·ª•c c√≥ id n√†y
  const author = await Author.findByIdAndUpdate(id, payload, {
    new: true, // n√≥ tr·∫£ v·ªÅ record sau khi update
  });
  console.log("<<=== üöÄ author ===>>", author);

  /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
  if (!author) {
    throw createError(400, "author Not Found");
  }

  //Return v·ªÅ record v·ª´a ƒëc update
  return author;
};

const deleteById = async (id: string) => {
  //b1 Ki·ªÉm tra xem t·ªìn t·∫°i author c√≥ id
  const author = await Author.findByIdAndDelete(id);

  if (!author) {
    throw createError(400, "Author Not Found");
  }

  //Return v·ªÅ record v·ª´a x√≥a
  return author;
};

export default {
  findAll,
  findById,
  createRecord,
  updateById,
  deleteById,
};
