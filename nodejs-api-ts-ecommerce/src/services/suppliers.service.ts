import createError from "http-errors";
// K·∫øt n·ªëi tr·ª±c ti·∫øp v·ªõi Database
import Supplier from "../models/supplier";
import { ObjectId } from "mongoose";
import { ISupplier } from "../types/models";

type TSupplier = ISupplier;

// L·∫•y t·∫•t c·∫£ record
const findAll = async () => {
  /**
   * SELECT * FROM brands
   */
  const suppliers = await Supplier.find();
  //console.log('<<=== üöÄ brands ===>>',brands);
  return suppliers;
};

// T√¨m 1 record theo ID
const findById = async (id: string) => {
  //ƒêi t√¨m 1 c√°i kh·ªõp id
  /**
   * SELECT * FROM brands WHERE id = ''
   */
  const supplier = await Supplier.findById(id);

  /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
  if (!supplier) {
    throw createError(400, "Supplier Not Found");
  }

  return supplier;
};

const createRecord = async (payload: TSupplier) => {
  console.log("<<=== üöÄ payload ===>>", payload);

  const supplier = await Supplier.create(payload);

  console.log("<<=== üöÄ create supplier ===>>", supplier);

  //Tr·∫£ l·∫°i record v·ª´a th√™m m·ªõi
  return supplier;
};

const updateById = async (id: string, payload: TSupplier) => {
  //b1.Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa danh m·ª•c c√≥ id n√†y
  const supplier = await Supplier.findByIdAndUpdate(id, payload, {
    new: true, // n√≥ tr·∫£ v·ªÅ record sau khi update
  });
  console.log("<<=== üöÄ supplier ===>>", supplier);

  /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
  if (!supplier) {
    throw createError(400, "supplier Not Found");
  }

  //Return v·ªÅ record v·ª´a ƒëc update
  return supplier;
};

const deleteById = async (id: string) => {
  //b1 Ki·ªÉm tra xem t·ªìn t·∫°i supplier c√≥ id
  const supplier = await Supplier.findByIdAndDelete(id);

  if (!supplier) {
    throw createError(400, "Supplier Not Found");
  }

  //Return v·ªÅ record v·ª´a x√≥a
  return supplier;
};

export default {
  findAll,
  findById,
  createRecord,
  updateById,
  deleteById,
};
