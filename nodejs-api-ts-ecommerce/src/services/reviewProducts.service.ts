import createError from "http-errors";
// K·∫øt n·ªëi tr·ª±c ti·∫øp v·ªõi Database
import ReviewProduct from "../models/reviewProduct";
import { ObjectId } from "mongoose";
import { IReviewProduct } from "../types/models";

type TReviewProduct = IReviewProduct;

// L·∫•y t·∫•t c·∫£ record
const findAll = async () => {
  /**
   * SELECT * FROM brands
   */
  const reviewProduct = await ReviewProduct.find();
  //console.log('<<=== üöÄ brands ===>>',brands);
  return reviewProduct;
};

// T√¨m 1 record theo ID
const findById = async (id: string) => {
  //ƒêi t√¨m 1 c√°i kh·ªõp id
  /**
   * SELECT * FROM brands WHERE id = ''
   */
  const reviewProduct = await ReviewProduct.findById(id);

  /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
  if (!reviewProduct) {
    throw createError(400, "reviewProduct Not Found");
  }

  return reviewProduct;
};

const createRecord = async (payload: TReviewProduct) => {
  console.log("<<=== üöÄ payload ===>>", payload);

  const reviewProduct = await ReviewProduct.create(payload);

  console.log("<<=== üöÄ create product ===>>", reviewProduct);

  //Tr·∫£ l·∫°i record v·ª´a th√™m m·ªõi
  return reviewProduct;
};

const updateById = async (id: string, payload: TReviewProduct) => {
  //b1.Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa danh m·ª•c c√≥ id n√†y
  const reviewProduct = await ReviewProduct.findByIdAndUpdate(id, payload, {
    new: true, // n√≥ tr·∫£ v·ªÅ record sau khi update
  });
  console.log("<<=== üöÄ reviewProduct ===>>", reviewProduct);

  /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
  if (!reviewProduct) {
    throw createError(400, "product Not Found");
  }

  //Return v·ªÅ record v·ª´a ƒëc update
  return reviewProduct;
};

const deleteById = async (id: string) => {
  //b1 Ki·ªÉm tra xem t·ªìn t·∫°i product c√≥ id
  const reviewProduct = await ReviewProduct.findByIdAndDelete(id);

  if (!reviewProduct) {
    throw createError(400, "reviewProduct Not Found");
  }

  //Return v·ªÅ record v·ª´a x√≥a
  return reviewProduct;
};

export default {
  findAll,
  findById,
  createRecord,
  updateById,
  deleteById,
};
